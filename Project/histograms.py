
# Libraries to read optional parameters
import argparse
import os

# Libraries to clean the data
import numpy as np
import pandas as pd
import seaborn as sns
import datetime 

# Libraries to graph functions
from matplotlib import pyplot as plt

parser = argparse.ArgumentParser(description="""\
IMPORTANT: Remember to run cleandata.py before running this script. It will not work otherwise.
This programs is designed to generate basic 
""", epilog="Group 1 - CMSC6950 - Memorial University of Newfoundland")
parser.add_argument("-a", "--all", action="store_true", help="Performs all the clean-up functions in this script", default=True)
parser.add_argument("-i", "--input", help="Select the output directory and file name. By default, it stores a file in the current directoy as cleanData.csv", default='cleanData.csv')
args = parser.parse_args()

inputFile = args.input
basicData = pd.read_csv(inputFile)



# print(basicData.columns)
# 'app', 'category', 'rating', 'reviews', 'size', 'installs', 'price', 'rated', 'lastUpdated', 'osVer'

#print(basicData.set_index(['app','rating']))

categorydf = pd.read_csv(inputFile).groupby('category').agg(np.size).iloc[:,0:1]
reviewsdf = pd.read_csv(inputFile).groupby('reviews').agg(np.size).iloc[:,0:1]
ratingdf = pd.read_csv(inputFile).groupby('rating').agg(np.size).iloc[:,0:1]
sizedf = pd.read_csv(inputFile).groupby('size').agg(np.size).iloc[:,0:1]
installsdf = pd.read_csv(inputFile).groupby('installs').agg(np.size).iloc[:,0:1]
pricedf = pd.read_csv(inputFile).groupby('price').agg(np.size).iloc[:,0:1]
rateddf = pd.read_csv(inputFile).groupby('rated').agg(np.size).iloc[:,0:1]
lastUpdateddf = pd.read_csv(inputFile).groupby('lastUpdated').agg(np.size).iloc[:,0:1]
osVerdf = pd.read_csv(inputFile).groupby('osVer').agg(np.size).iloc[:,0:1]

def printValues():
    print("#######################################################################################")
    print(categorydf)
    print("#######################################################################################")
    print(ratingdf)
    print("#######################################################################################")
    print(reviewsdf)
    print("#######################################################################################")
    print(sizedf)
    print("#######################################################################################")
    print(installsdf)
    print("#######################################################################################")
    print(pricedf)
    print("#######################################################################################")
    print(rateddf)
    print("#######################################################################################")
    print(lastUpdateddf)
    print("#######################################################################################")
    print(osVerdf)
    print("#######################################################################################")

histogram, axes = plt.subplots(3,3) # Create a figure
print(categorydf)
#input("Press CTRL+C here")
axes[0,0] = categorydf.plot(kind="bar")
plt.tight_layout() # adjusting the location of axes

plt.show()




# This prints out the groups generated by the groupby and the indices corresponding to the members belonging to a specific group
#print(basicData.groupby('rating').groups)



